name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirmation:
        description: 'Type "destroy" to confirm destruction of all resources'
        required: true

jobs:
  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    environment: production
    
    # Only run if the confirmation input equals "destroy"
    if: ${{ github.event.inputs.confirmation == 'destroy' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ca-central-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Destroy Phase 2 resources first
    - name: Terraform Init (Phase 2)
      id: init-phase2
      run: |
        cd ./terraform-phase2
        terraform init \
          -backend-config="bucket=capstonebucketcloud2025" \
          -backend-config="key=production/phase2/terraform.tfstate" \
          -backend-config="region=ca-central-1"
      shell: bash

    # Create a file to fix the variable type issues
    - name: Create override file for Phase 2
      run: |
        cat > terraform-phase2/terraform.tfvars << EOF
        # Fix variable type issue
        bastion_allowed_ssh_cidr = "0.0.0.0/0"
        EOF
        
        # Create an override to disable the bastion module
        cat > terraform-phase2/override.tf << EOF
        # Override to disable the bastion module
        module "bastion" {
          source = "./modules/bastion"
          count = 0
          
          # Placeholder values
          vpc_id = "vpc-dummy"
          public_subnet_ids = ["subnet-dummy"]
          ami_id = "ami-dummy"
          instance_type = "t2.micro"
          key_name = "dummy-key"
          allowed_ssh_cidr = "0.0.0.0/0"
        }
        EOF
      shell: bash

    - name: Terraform Destroy (Phase 2)
      id: destroy-phase2
      run: |
        cd ./terraform-phase2
        terraform destroy -auto-approve || true
      shell: bash
      continue-on-error: true

    # Destroy Phase 1 resources second
    - name: Terraform Init (Phase 1)
      id: init-phase1
      run: |
        cd ./terraform-phase1
        terraform init \
          -backend-config="bucket=capstonebucketcloud2025" \
          -backend-config="key=production/terraform.tfstate" \
          -backend-config="region=ca-central-1"
      shell: bash

    # Create a file to fix the variable type issues in Phase 1
    - name: Create override file for Phase 1
      run: |
        cat > terraform-phase1/terraform.tfvars << EOF
        # Fix variable type issue
        bastion_allowed_ssh_cidr = "0.0.0.0/0"
        EOF
      shell: bash

    - name: Terraform Destroy (Phase 1)
      id: destroy-phase1
      run: |
        cd ./terraform-phase1
        terraform destroy -auto-approve || true
      shell: bash
      continue-on-error: true

    # Clean up any remaining resources with AWS CLI if needed
    - name: Clean up remaining resources
      run: |
        echo "Cleaning up any remaining resources..."
        
        # Clean up ELB resources
        echo "Cleaning up any ELB resources..."
        
        # Find and delete any load balancer listeners
        LISTENERS=$(aws elbv2 describe-listeners --query "Listeners[].ListenerArn" --output text || echo "")
        if [ -n "$LISTENERS" ]; then
          for listener in $LISTENERS; do
            echo "Deleting listener $listener"
            aws elbv2 delete-listener --listener-arn $listener || echo "Failed to delete listener $listener"
          done
        fi
        
        # Find and delete any target groups
        TGS=$(aws elbv2 describe-target-groups --query "TargetGroups[].TargetGroupArn" --output text || echo "")
        if [ -n "$TGS" ]; then
          for tg in $TGS; do
            echo "Deleting target group $tg"
            aws elbv2 delete-target-group --target-group-arn $tg || echo "Failed to delete target group $tg"
          done
        fi
        
        # Find and delete any load balancers
        LBS=$(aws elbv2 describe-load-balancers --query "LoadBalancers[].LoadBalancerArn" --output text || echo "")
        if [ -n "$LBS" ]; then
          for lb in $LBS; do
            echo "Deleting load balancer $lb"
            aws elbv2 delete-load-balancer --load-balancer-arn $lb || echo "Failed to delete load balancer $lb"
          done
          
          # Wait for load balancers to be deleted
          echo "Waiting for load balancers to be deleted..."
          sleep 60
        fi
        
        # Clean up S3 state files
        echo "Cleaning up S3 state files..."
        aws s3 rm s3://capstonebucketcloud2025/production/terraform.tfstate || true
        aws s3 rm s3://capstonebucketcloud2025/production/phase2/terraform.tfstate || true
      shell: bash
      continue-on-error: true 